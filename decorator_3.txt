fun1 call 1 executed in 0.0000
name:      fun1
type:      <class 'function'>
sign:      (n, m)
args:      positional (None, None) 
           key=worded {}
doc:       Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
source:    @Decorator3
           def fun1(n, m):
               """
               Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
               """
               res = [i ** m for i in range(n)]
               print(res)
output:    [0, 1, 1267650600228229401496703205376, 515377520732011331036461129765621272702107522001, 1606938044258990275541962092341162602522202993782792835301376, 7888609052210118054117285652827862296732064351090230047702789306640625, 653318623500070906096690267158057820537143710472954871543071966369497141477376, 3234476509624757991344647769100216810857203198904625400933895331391691459636928060001, 2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376, 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044001]

fun2 call 1 executed in 0.0000
name:      fun2
type:      <class 'function'>
sign:      (a, h, k)
args:      positional (None, None, None) 
           key=worded {}
doc:       Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
source:    @Decorator3
           def fun2(a, h, k):
               """
               Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
               """
               x = range(-10, 10)
               y = [a * (i + h) ** 2 + k for i in x]
               print(list(zip(x, y)))
output:    [(-10, 165), (-9, 95), (-8, 45), (-7, 15), (-6, 5), (-5, 15), (-4, 45), (-3, 95), (-2, 165), (-1, 255), (0, 365), (1, 495), (2, 645), (3, 815), (4, 1005), (5, 1215), (6, 1445), (7, 1695), (8, 1965), (9, 2255)]

fun3 call 1 executed in 0.0001
name:      fun3
type:      <class 'function'>
sign:      (a, b)
args:      positional (None, None) 
           key=worded {}
doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]

fun4 call 1 executed in 0.0001
name:      fun4
type:      <class 'function'>
sign:      (a, b)
args:      positional (None, None) 
           key=worded {}
doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
output:    [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0000
Name:      fun1
Type:      <class 'function'>
Sign:      (n, m)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
Source:    @Decorator3
           def fun1(n, m):
               """
               Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
               """
               res = [i ** m for i in range(n)]
               print(res)
Output:    [0, 1, 1267650600228229401496703205376, 515377520732011331036461129765621272702107522001, 1606938044258990275541962092341162602522202993782792835301376, 7888609052210118054117285652827862296732064351090230047702789306640625, 653318623500070906096690267158057820537143710472954871543071966369497141477376, 3234476509624757991344647769100216810857203198904625400933895331391691459636928060001, 2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376, 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044001]

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, h, k)
Args:      positional (None, None, None) 
           key=worded {}
Doc:       Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
Source:    @Decorator3
           def fun2(a, h, k):
               """
               Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
               """
               x = range(-10, 10)
               y = [a * (i + h) ** 2 + k for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 165), (-9, 95), (-8, 45), (-7, 15), (-6, 5), (-5, 15), (-4, 45), (-3, 95), (-2, 165), (-1, 255), (0, 365), (1, 495), (2, 645), (3, 815), (4, 1005), (5, 1215), (6, 1445), (7, 1695), (8, 1965), (9, 2255)]

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0000
Name:      fun1
Type:      <class 'function'>
Sign:      (n, m)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
Source:    @Decorator3
           def fun1(n, m):
               """
               Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
               """
               res = [i ** m for i in range(n)]
               print(res)
Output:    [0, 1, 1267650600228229401496703205376, 515377520732011331036461129765621272702107522001, 1606938044258990275541962092341162602522202993782792835301376, 7888609052210118054117285652827862296732064351090230047702789306640625, 653318623500070906096690267158057820537143710472954871543071966369497141477376, 3234476509624757991344647769100216810857203198904625400933895331391691459636928060001, 2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376, 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044001]

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, h, k)
Args:      positional (None, None, None) 
           key=worded {}
Doc:       Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
Source:    @Decorator3
           def fun2(a, h, k):
               """
               Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
               """
               x = range(-10, 10)
               y = [a * (i + h) ** 2 + k for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 165), (-9, 95), (-8, 45), (-7, 15), (-6, 5), (-5, 15), (-4, 45), (-3, 95), (-2, 165), (-1, 255), (0, 365), (1, 495), (2, 645), (3, 815), (4, 1005), (5, 1215), (6, 1445), (7, 1695), (8, 1965), (9, 2255)]

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n, m)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
Source:    @Decorator3
           def fun1(n, m):
               """
               Generic function for creating a list of numbers
               :param n: the number of items
               :param m: the power to raise the index
               :return: None
               """
               res = [i ** m for i in range(n)]
               print(res)
Output:    [0, 1, 1267650600228229401496703205376, 515377520732011331036461129765621272702107522001, 1606938044258990275541962092341162602522202993782792835301376, 7888609052210118054117285652827862296732064351090230047702789306640625, 653318623500070906096690267158057820537143710472954871543071966369497141477376, 3234476509624757991344647769100216810857203198904625400933895331391691459636928060001, 2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376, 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044001]

fun2 call 1 executed in 0.0002
Name:      fun2
Type:      <class 'function'>
Sign:      (a, h, k)
Args:      positional (None, None, None) 
           key=worded {}
Doc:       Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
Source:    @Decorator3
           def fun2(a, h, k):
               """
               Generating a parabola
               :param a: positive or negative curvature
               :param h: horizontal offset
               :param k: vertical offset
               :return: None
               """
               x = range(-10, 10)
               y = [a * (i + h) ** 2 + k for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 165), (-9, 95), (-8, 45), (-7, 15), (-6, 5), (-5, 15), (-4, 45), (-3, 95), (-2, 165), (-1, 255), (0, 365), (1, 495), (2, 645), (3, 815), (4, 1005), (5, 1215), (6, 1445), (7, 1695), (8, 1965), (9, 2255)]

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (None, None) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
Output:    [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

