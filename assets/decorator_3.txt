fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0004
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0002
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0006
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0003
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0003
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0002
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0002
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0003
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0003
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0004
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0003
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0003
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

fun1 call 1 executed in 0.0001
Name:      fun1
Type:      <class 'function'>
Sign:      (n)
Args:      positional (10,) 
           key=worded {}
Doc:       function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
Source:    @Decorator3
           def fun1(n):
               """
               function for creating a pascal's triangle
               :param n: the number of rows
               :return: None
               """
               lists = [[1]]
               for j in range(n):
                   temp = [0]+lists[j]+[0]
                   lists.append([value + temp[count+1] for count, value in enumerate(temp) if count < j+2])
               output = []
               for row in lists:
                   output.append(' '.join([str(i) for i in row]))
               max_size = len(output[-1])
               for row in output:
                   print(row.center(max_size))
Output:                     1                 
                           1 1                
                          1 2 1               
                         1 3 3 1              
                        1 4 6 4 1             
                      1 5 10 10 5 1           
                     1 6 15 20 15 6 1         
                   1 7 21 35 35 21 7 1        
                  1 8 28 56 70 56 28 8 1      
               1 9 36 84 126 126 84 36 9 1    
           1 10 45 120 210 252 210 120 45 10 1

fun2 call 1 executed in 0.0001
Name:      fun2
Type:      <class 'function'>
Sign:      (a, b, c)
Args:      positional (1, 0, 1) 
           key=worded {}
Doc:       Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
Source:    @Decorator3
           def fun2(a, b, c):
               """
               Quadratic equation solver ax**2 + bx+c =0
               :param a:
               :param b:
               :param c:
               :return: None
               """
               rhs = ((b**2 - 4*a*c)**0.5)/(2*a)
               print(-b + rhs, -b-rhs)
Output:    (6.123233995736766e-17+1j) (-6.123233995736766e-17-1j)

fun3 call 1 executed in 0.0002
Name:      fun3
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun3(a, b):
               """
               Generating a hyperbola
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((i ** 2 / a ** 2 - 1) * b ** 2) ** 0.5 for i in x]
               print(list(zip(x, y)))
               result = '\n'.join(list(map(lambda val: str(val)+" is a number", y)))
               print(result)
Output:    [(-10, 0.0), (-9, (1.334527909753466e-16+2.1794494717703365j)), (-8, (1.8369701987210297e-16+3j)), (-7, (2.1864318665887285e-16+3.570714214271425j)), (-6, (2.4492935982947064e-16+4j)), (-5, (2.6514380968122674e-16+4.330127018922194j)), (-4, (2.8060183283390636e-16+4.58257569495584j)), (-3, (2.9205964739911117e-16+4.769696007084728j)), (-2, (2.9997597730436923e-16+4.898979485566356j)), (-1, (3.0462704501111266e-16+4.9749371855331j)), (0, (3.061616997868383e-16+5j)), (1, (3.0462704501111266e-16+4.9749371855331j)), (2, (2.9997597730436923e-16+4.898979485566356j)), (3, (2.9205964739911117e-16+4.769696007084728j)), (4, (2.8060183283390636e-16+4.58257569495584j)), (5, (2.6514380968122674e-16+4.330127018922194j)), (6, (2.4492935982947064e-16+4j)), (7, (2.1864318665887285e-16+3.570714214271425j)), (8, (1.8369701987210297e-16+3j)), (9, (1.334527909753466e-16+2.1794494717703365j))]
           0.0 is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number
           (1.8369701987210297e-16+3j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (3.061616997868383e-16+5j) is a number
           (3.0462704501111266e-16+4.9749371855331j) is a number
           (2.9997597730436923e-16+4.898979485566356j) is a number
           (2.9205964739911117e-16+4.769696007084728j) is a number
           (2.8060183283390636e-16+4.58257569495584j) is a number
           (2.6514380968122674e-16+4.330127018922194j) is a number
           (2.4492935982947064e-16+4j) is a number
           (2.1864318665887285e-16+3.570714214271425j) is a number
           (1.8369701987210297e-16+3j) is a number
           (1.334527909753466e-16+2.1794494717703365j) is a number

fun4 call 1 executed in 0.0001
Name:      fun4
Type:      <class 'function'>
Sign:      (a, b)
Args:      positional (10, 5) 
           key=worded {}
Doc:       Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
Source:    @Decorator3
           def fun4(a, b):
               """
               Generating an ellipse
               :param a: half the length of the major axis
               :param b: half the length of the minor axis
               :return: None
               """
               x = range(-10, 10)
               y = [((1 - i ** 2 / a ** 2) * b ** 2) ** 0.5 for i in x]
               result = list(filter(lambda elem: elem is complex, y))
               print('Number of non complex is ', len(y) - len(result))
               print(list(zip(x, y)))
Output:    Number of non complex is  20
           [(-10, 0.0), (-9, 2.1794494717703365), (-8, 3.0), (-7, 3.570714214271425), (-6, 4.0), (-5, 4.330127018922194), (-4, 4.58257569495584), (-3, 4.769696007084728), (-2, 4.898979485566356), (-1, 4.9749371855331), (0, 5.0), (1, 4.9749371855331), (2, 4.898979485566356), (3, 4.769696007084728), (4, 4.58257569495584), (5, 4.330127018922194), (6, 4.0), (7, 3.570714214271425), (8, 3.0), (9, 2.1794494717703365)]

